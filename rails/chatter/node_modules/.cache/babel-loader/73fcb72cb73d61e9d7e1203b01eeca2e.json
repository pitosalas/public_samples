{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defaultSchema } from './schema';\nimport Debug from './debug';\n\nvar multipleInstances = function multipleInstances(element) {\n  if (['checkbox', 'radio'].includes(element.type)) {\n    return document.querySelectorAll(\"input[type=\\\"\".concat(element.type, \"\\\"][name=\\\"\").concat(element.name, \"\\\"]\")).length > 1;\n  }\n\n  return false;\n};\n\nvar collectCheckedOptions = function collectCheckedOptions(element) {\n  return Array.from(element.querySelectorAll('option:checked')).concat(Array.from(document.querySelectorAll(\"input[type=\\\"\".concat(element.type, \"\\\"][name=\\\"\").concat(element.name, \"\\\"]\"))).filter(function (elem) {\n    return elem.checked;\n  })).map(function (o) {\n    return o.value;\n  });\n}; // Returns a string value for the passed array.\n//\n//   attributeValue(['', 'one', null, 'two', 'three ']) // 'one two three'\n//\n\n\nexport var attributeValue = function attributeValue() {\n  var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var value = values.filter(function (v) {\n    return v && String(v).length;\n  }).map(function (v) {\n    return v.trim();\n  }).join(' ').trim();\n  return value.length ? value : null;\n}; // Returns an array for the passed string value by splitting on whitespace.\n//\n//   attributeValues('one two three ') // ['one', 'two', 'three']\n//\n\nexport var attributeValues = function attributeValues(value) {\n  if (!value) return [];\n  if (!value.length) return [];\n  return value.split(' ').filter(function (v) {\n    return v.trim().length;\n  });\n}; // Extracts attributes from a DOM element.\n//\n\nexport var extractElementAttributes = function extractElementAttributes(element) {\n  var attrs = Array.from(element.attributes).reduce(function (memo, attr) {\n    memo[attr.name] = attr.value;\n    return memo;\n  }, {});\n  attrs.checked = !!element.checked;\n  attrs.selected = !!element.selected;\n  attrs.tag_name = element.tagName;\n\n  if (element.tagName.match(/select/i) || multipleInstances(element)) {\n    var collectedOptions = collectCheckedOptions(element);\n    attrs.values = collectedOptions;\n    attrs.value = collectedOptions.join(',');\n  } else {\n    attrs.value = element.value;\n  }\n\n  return attrs;\n}; // Extracts the dataset of an element and combines it with the data attributes from all parents if requested.\n//\n\nexport var extractElementDataset = function extractElementDataset(element) {\n  var datasetAttribute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var attrs = extractDataAttributes(element) || {};\n  var dataset = datasetAttribute && element.attributes[datasetAttribute];\n\n  if (dataset && dataset.value === 'combined') {\n    var parent = element.parentElement;\n\n    while (parent) {\n      attrs = _objectSpread(_objectSpread({}, extractDataAttributes(parent)), attrs);\n      parent = parent.parentElement;\n    }\n  }\n\n  return attrs;\n}; // Extracts all data attributes from a DOM element.\n//\n\nexport var extractDataAttributes = function extractDataAttributes(element) {\n  var attrs = {};\n\n  if (element && element.attributes) {\n    Array.from(element.attributes).forEach(function (attr) {\n      if (attr.name.startsWith('data-')) {\n        attrs[attr.name] = attr.value;\n      }\n    });\n  }\n\n  return attrs;\n};","map":null,"metadata":{},"sourceType":"module"}