{"ast":null,"code":"import { mutableTags } from './enums';\nimport { isTextInput } from './utils';\nimport activeElement from './active_element'; // Indicates whether or not we should morph an element via onBeforeElUpdated callback\n// SEE: https://github.com/patrick-steele-idem/morphdom#morphdomfromnode-tonode-options--node\n//\n\nvar shouldMorph = function shouldMorph(operation) {\n  return function (fromEl, toEl) {\n    return !shouldMorphCallbacks.map(function (callback) {\n      return typeof callback === 'function' ? callback(operation, fromEl, toEl) : true;\n    }).includes(false);\n  };\n}; // Execute any pluggable functions that modify elements after morphing via onElUpdated callback\n//\n\n\nvar didMorph = function didMorph(operation) {\n  return function (el) {\n    didMorphCallbacks.forEach(function (callback) {\n      if (typeof callback === 'function') callback(operation, el);\n    });\n  };\n};\n\nvar verifyNotMutable = function verifyNotMutable(detail, fromEl, toEl) {\n  // Skip nodes that are equal:\n  // https://github.com/patrick-steele-idem/morphdom#can-i-make-morphdom-blaze-through-the-dom-tree-even-faster-yes\n  if (!mutableTags[fromEl.tagName] && fromEl.isEqualNode(toEl)) return false;\n  return true;\n};\n\nvar verifyNotContentEditable = function verifyNotContentEditable(detail, fromEl, toEl) {\n  if (fromEl === activeElement.element && fromEl.isContentEditable) return false;\n  return true;\n};\n\nvar verifyNotPermanent = function verifyNotPermanent(detail, fromEl, toEl) {\n  var permanentAttributeName = detail.permanentAttributeName;\n  if (!permanentAttributeName) return true;\n  var permanent = fromEl.closest(\"[\".concat(permanentAttributeName, \"]\")); // only morph attributes on the active non-permanent text input\n\n  if (!permanent && fromEl === activeElement.element && isTextInput(fromEl)) {\n    var ignore = {\n      value: true\n    };\n    Array.from(toEl.attributes).forEach(function (attribute) {\n      if (!ignore[attribute.name]) fromEl.setAttribute(attribute.name, attribute.value);\n    });\n    return false;\n  }\n\n  return !permanent;\n};\n\nvar shouldMorphCallbacks = [verifyNotMutable, verifyNotPermanent, verifyNotContentEditable];\nvar didMorphCallbacks = [];\nexport { shouldMorphCallbacks, didMorphCallbacks, shouldMorph, didMorph, verifyNotMutable, verifyNotContentEditable, verifyNotPermanent };","map":null,"metadata":{},"sourceType":"module"}