{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport morphdom from 'morphdom';\nimport { shouldMorph, didMorph } from './morph_callbacks';\nimport { assignFocus, dispatch, getClassNames, processElements, before, after, operate } from './utils';\nexport default {\n  // DOM Mutations\n  append: function append(operation) {\n    processElements(operation, function (element) {\n      before(element, operation);\n      operate(operation, function () {\n        var html = operation.html,\n            focusSelector = operation.focusSelector;\n        element.insertAdjacentHTML('beforeend', html || '');\n        assignFocus(focusSelector);\n      });\n      after(element, operation);\n    });\n  },\n  graft: function graft(operation) {\n    processElements(operation, function (element) {\n      before(element, operation);\n      operate(operation, function () {\n        var parent = operation.parent,\n            focusSelector = operation.focusSelector;\n        var parentElement = document.querySelector(parent);\n\n        if (parentElement) {\n          parentElement.appendChild(element);\n          assignFocus(focusSelector);\n        }\n      });\n      after(element, operation);\n    });\n  },\n  innerHtml: function innerHtml(operation) {\n    processElements(operation, function (element) {\n      before(element, operation);\n      operate(operation, function () {\n        var html = operation.html,\n            focusSelector = operation.focusSelector;\n        element.innerHTML = html || '';\n        assignFocus(focusSelector);\n      });\n      after(element, operation);\n    });\n  },\n  insertAdjacentHtml: function insertAdjacentHtml(operation) {\n    processElements(operation, function (element) {\n      before(element, operation);\n      operate(operation, function () {\n        var html = operation.html,\n            position = operation.position,\n            focusSelector = operation.focusSelector;\n        element.insertAdjacentHTML(position || 'beforeend', html || '');\n        assignFocus(focusSelector);\n      });\n      after(element, operation);\n    });\n  },\n  insertAdjacentText: function insertAdjacentText(operation) {\n    processElements(operation, function (element) {\n      before(element, operation);\n      operate(operation, function () {\n        var text = operation.text,\n            position = operation.position,\n            focusSelector = operation.focusSelector;\n        element.insertAdjacentText(position || 'beforeend', text || '');\n        assignFocus(focusSelector);\n      });\n      after(element, operation);\n    });\n  },\n  morph: function morph(operation) {\n    processElements(operation, function (element) {\n      var html = operation.html;\n      var template = document.createElement('template');\n      template.innerHTML = String(html).trim();\n      operation.content = template.content;\n      var parent = element.parentElement;\n      var ordinal = Array.from(parent.children).indexOf(element);\n      before(element, operation);\n      operate(operation, function () {\n        var childrenOnly = operation.childrenOnly,\n            focusSelector = operation.focusSelector;\n        morphdom(element, childrenOnly ? template.content : template.innerHTML, {\n          childrenOnly: !!childrenOnly,\n          onBeforeElUpdated: shouldMorph(operation),\n          onElUpdated: didMorph(operation)\n        });\n        assignFocus(focusSelector);\n      });\n      after(parent.children[ordinal], operation);\n    });\n  },\n  outerHtml: function outerHtml(operation) {\n    processElements(operation, function (element) {\n      var parent = element.parentElement;\n      var ordinal = Array.from(parent.children).indexOf(element);\n      before(element, operation);\n      operate(operation, function () {\n        var html = operation.html,\n            focusSelector = operation.focusSelector;\n        element.outerHTML = html || '';\n        assignFocus(focusSelector);\n      });\n      after(parent.children[ordinal], operation);\n    });\n  },\n  prepend: function prepend(operation) {\n    processElements(operation, function (element) {\n      before(element, operation);\n      operate(operation, function () {\n        var html = operation.html,\n            focusSelector = operation.focusSelector;\n        element.insertAdjacentHTML('afterbegin', html || '');\n        assignFocus(focusSelector);\n      });\n      after(element, operation);\n    });\n  },\n  remove: function remove(operation) {\n    processElements(operation, function (element) {\n      before(element, operation);\n      operate(operation, function () {\n        var focusSelector = operation.focusSelector;\n        element.remove();\n        assignFocus(focusSelector);\n      });\n      after(document, operation);\n    });\n  },\n  replace: function replace(operation) {\n    processElements(operation, function (element) {\n      var parent = element.parentElement;\n      var ordinal = Array.from(parent.children).indexOf(element);\n      before(element, operation);\n      operate(operation, function () {\n        var html = operation.html,\n            focusSelector = operation.focusSelector;\n        element.outerHTML = html || '';\n        assignFocus(focusSelector);\n      });\n      after(parent.children[ordinal], operation);\n    });\n  },\n  textContent: function textContent(operation) {\n    processElements(operation, function (element) {\n      before(element, operation);\n      operate(operation, function () {\n        var text = operation.text,\n            focusSelector = operation.focusSelector;\n        element.textContent = text || '';\n        assignFocus(focusSelector);\n      });\n      after(element, operation);\n    });\n  },\n  // Element Property Mutations\n  addCssClass: function addCssClass(operation) {\n    processElements(operation, function (element) {\n      before(element, operation);\n      operate(operation, function () {\n        var _element$classList;\n\n        var name = operation.name;\n\n        (_element$classList = element.classList).add.apply(_element$classList, _toConsumableArray(getClassNames(name || '')));\n      });\n      after(element, operation);\n    });\n  },\n  removeAttribute: function removeAttribute(operation) {\n    processElements(operation, function (element) {\n      before(element, operation);\n      operate(operation, function () {\n        var name = operation.name;\n        element.removeAttribute(name);\n      });\n      after(element, operation);\n    });\n  },\n  removeCssClass: function removeCssClass(operation) {\n    processElements(operation, function (element) {\n      before(element, operation);\n      operate(operation, function () {\n        var _element$classList2;\n\n        var name = operation.name;\n\n        (_element$classList2 = element.classList).remove.apply(_element$classList2, _toConsumableArray(getClassNames(name)));\n      });\n      after(element, operation);\n    });\n  },\n  setAttribute: function setAttribute(operation) {\n    processElements(operation, function (element) {\n      before(element, operation);\n      operate(operation, function () {\n        var name = operation.name,\n            value = operation.value;\n        element.setAttribute(name, value || '');\n      });\n      after(element, operation);\n    });\n  },\n  setDatasetProperty: function setDatasetProperty(operation) {\n    processElements(operation, function (element) {\n      before(element, operation);\n      operate(operation, function () {\n        var name = operation.name,\n            value = operation.value;\n        element.dataset[name] = value || '';\n      });\n      after(element, operation);\n    });\n  },\n  setProperty: function setProperty(operation) {\n    processElements(operation, function (element) {\n      before(element, operation);\n      operate(operation, function () {\n        var name = operation.name,\n            value = operation.value;\n        if (name in element) element[name] = value || '';\n      });\n      after(element, operation);\n    });\n  },\n  setStyle: function setStyle(operation) {\n    processElements(operation, function (element) {\n      before(element, operation);\n      operate(operation, function () {\n        var name = operation.name,\n            value = operation.value;\n        element.style[name] = value || '';\n      });\n      after(element, operation);\n    });\n  },\n  setStyles: function setStyles(operation) {\n    processElements(operation, function (element) {\n      before(element, operation);\n      operate(operation, function () {\n        var styles = operation.styles;\n\n        for (var _i2 = 0, _Object$entries = Object.entries(styles); _i2 < _Object$entries.length; _i2++) {\n          var _ref3 = _Object$entries[_i2];\n\n          var _ref2 = _slicedToArray(_ref3, 2);\n\n          var name = _ref2[0];\n          var value = _ref2[1];\n          element.style[name] = value || '';\n        }\n      });\n      after(element, operation);\n    });\n  },\n  setValue: function setValue(operation) {\n    processElements(operation, function (element) {\n      before(element, operation);\n      operate(operation, function () {\n        var value = operation.value;\n        element.value = value || '';\n      });\n      after(element, operation);\n    });\n  },\n  // DOM Events\n  dispatchEvent: function dispatchEvent(operation) {\n    processElements(operation, function (element) {\n      before(element, operation);\n      operate(operation, function () {\n        var name = operation.name,\n            detail = operation.detail;\n        dispatch(element, name, detail);\n      });\n      after(element, operation);\n    });\n  },\n  setMeta: function setMeta(operation) {\n    before(document, operation);\n    operate(operation, function () {\n      var name = operation.name,\n          content = operation.content;\n      var meta = document.head.querySelector(\"meta[name='\".concat(name, \"']\"));\n\n      if (!meta) {\n        meta = document.createElement('meta');\n        meta.name = name;\n        document.head.appendChild(meta);\n      }\n\n      meta.content = content;\n    });\n    after(document, operation);\n  },\n  // Browser Manipulations\n  clearStorage: function clearStorage(operation) {\n    before(document, operation);\n    operate(operation, function () {\n      var type = operation.type;\n      var storage = type === 'session' ? sessionStorage : localStorage;\n      storage.clear();\n    });\n    after(document, operation);\n  },\n  go: function go(operation) {\n    before(window, operation);\n    operate(operation, function () {\n      var delta = operation.delta;\n      history.go(delta);\n    });\n    after(window, operation);\n  },\n  pushState: function pushState(operation) {\n    before(window, operation);\n    operate(operation, function () {\n      var state = operation.state,\n          title = operation.title,\n          url = operation.url;\n      history.pushState(state || {}, title || '', url);\n    });\n    after(window, operation);\n  },\n  redirectTo: function redirectTo(operation) {\n    before(window, operation);\n    operate(operation, function () {\n      var url = operation.url,\n          action = operation.action;\n      action = action || 'advance';\n      if (window.Turbo) window.Turbo.visit(url, {\n        action: action\n      });\n      if (window.Turbolinks) window.Turbolinks.visit(url, {\n        action: action\n      });\n      if (!window.Turbo && !window.Turbolinks) window.location.href = url;\n    });\n    after(window, operation);\n  },\n  reload: function reload(operation) {\n    before(window, operation);\n    operate(operation, function () {\n      window.location.reload();\n    });\n    after(window, operation);\n  },\n  removeStorageItem: function removeStorageItem(operation) {\n    before(document, operation);\n    operate(operation, function () {\n      var key = operation.key,\n          type = operation.type;\n      var storage = type === 'session' ? sessionStorage : localStorage;\n      storage.removeItem(key);\n    });\n    after(document, operation);\n  },\n  replaceState: function replaceState(operation) {\n    before(window, operation);\n    operate(operation, function () {\n      var state = operation.state,\n          title = operation.title,\n          url = operation.url;\n      history.replaceState(state || {}, title || '', url);\n    });\n    after(window, operation);\n  },\n  scrollIntoView: function scrollIntoView(operation) {\n    var element = operation.element;\n    before(element, operation);\n    operate(operation, function () {\n      element.scrollIntoView(operation);\n    });\n    after(element, operation);\n  },\n  setCookie: function setCookie(operation) {\n    before(document, operation);\n    operate(operation, function () {\n      var cookie = operation.cookie;\n      document.cookie = cookie || '';\n    });\n    after(document, operation);\n  },\n  setFocus: function setFocus(operation) {\n    var element = operation.element;\n    before(element, operation);\n    operate(operation, function () {\n      assignFocus(element);\n    });\n    after(element, operation);\n  },\n  setStorageItem: function setStorageItem(operation) {\n    before(document, operation);\n    operate(operation, function () {\n      var key = operation.key,\n          value = operation.value,\n          type = operation.type;\n      var storage = type === 'session' ? sessionStorage : localStorage;\n      storage.setItem(key, value || '');\n    });\n    after(document, operation);\n  },\n  // Notifications\n  consoleLog: function consoleLog(operation) {\n    before(document, operation);\n    operate(operation, function () {\n      var message = operation.message,\n          level = operation.level;\n      level && ['warn', 'info', 'error'].includes(level) ? console[level](message || '') : console.log(message || '');\n    });\n    after(document, operation);\n  },\n  consoleTable: function consoleTable(operation) {\n    before(document, operation);\n    operate(operation, function () {\n      var data = operation.data,\n          columns = operation.columns;\n      console.table(data, columns || []);\n    });\n    after(document, operation);\n  },\n  notification: function notification(operation) {\n    before(document, operation);\n    operate(operation, function () {\n      var title = operation.title,\n          options = operation.options;\n      Notification.requestPermission().then(function (result) {\n        operation.permission = result;\n        if (result === 'granted') new Notification(title || '', options);\n      });\n    });\n    after(document, operation);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}