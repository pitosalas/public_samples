{"ast":null,"code":"import { inputTags, textInputTypes } from './enums';\nimport { activeElement } from './cable_ready'; // Indicates if the passed element is considered a text input.\n//\n\nexport var isTextInput = function isTextInput(element) {\n  return inputTags[element.tagName] && textInputTypes[element.type];\n}; // Assigns focus to the appropriate element... preferring the explicitly passed selector\n//\n// * selector - a CSS selector for the element that should have focus\n//\n\nexport var assignFocus = function assignFocus(selector) {\n  var element = selector && selector.nodeType === Node.ELEMENT_NODE ? selector : document.querySelector(selector);\n  var focusElement = element || activeElement;\n  if (focusElement && focusElement.focus) focusElement.focus();\n}; // Dispatches an event on the passed element\n//\n// * element - the element\n// * name - the name of the event\n// * detail - the event detail\n//\n\nexport var dispatch = function dispatch(element, name) {\n  var detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var init = {\n    bubbles: true,\n    cancelable: true,\n    detail: detail\n  };\n  var evt = new CustomEvent(name, init);\n  element.dispatchEvent(evt);\n  if (window.jQuery) window.jQuery(element).trigger(name, detail);\n}; // Accepts an xPath query and returns the element found at that position in the DOM\n//\n\nexport var xpathToElement = function xpathToElement(xpath) {\n  return document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;\n}; // Return an array with the class names to be used\n//\n// * names - could be a string or an array of strings for multiple classes.\n//\n\nexport var getClassNames = function getClassNames(names) {\n  return Array(names).flat();\n}; // Perform operation for either the first or all of the elements returned by CSS selector\n//\n// * operation - the instruction payload from perform\n// * callback - the operation function to run for each element\n//\n\nexport var processElements = function processElements(operation, callback) {\n  Array.from(operation.selectAll ? operation.element : [operation.element]).forEach(callback);\n};","map":null,"metadata":{},"sourceType":"module"}