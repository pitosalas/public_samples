{"ast":null,"code":"import { xpathToElement, dispatch } from './utils';\nimport activeElement from './active_element';\nimport OperationStore from './operation_store';\nimport actionCable from './action_cable';\nimport StreamFromElement from './elements/stream_from_element';\nimport UpdatesForElement from './elements/updates_for_element';\n\nvar perform = function perform(operations) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    emitMissingElementWarnings: true\n  };\n  var batches = {};\n  operations.forEach(function (operation) {\n    if (!!operation.batch) batches[operation.batch] = batches[operation.batch] ? ++batches[operation.batch] : 1;\n  });\n  operations.forEach(function (operation) {\n    var name = operation.operation;\n\n    try {\n      if (operation.selector) {\n        operation.element = operation.xpath ? xpathToElement(operation.selector) : document[operation.selectAll ? 'querySelectorAll' : 'querySelector'](operation.selector);\n      } else {\n        operation.element = document;\n      }\n\n      if (operation.element || options.emitMissingElementWarnings) {\n        activeElement.set(document.activeElement);\n        var cableReadyOperation = OperationStore.all[name];\n\n        if (cableReadyOperation) {\n          cableReadyOperation(operation);\n          if (!!operation.batch && --batches[operation.batch] === 0) dispatch(document, 'cable-ready:batch-complete', {\n            batch: operation.batch\n          });\n        } else {\n          console.error(\"CableReady couldn't find the \\\"\".concat(name, \"\\\" operation. Make sure you use the camelized form when calling an operation method.\"));\n        }\n      }\n    } catch (e) {\n      if (operation.element) {\n        console.error(\"CableReady detected an error in \".concat(name, \": \").concat(e.message, \". If you need to support older browsers make sure you've included the corresponding polyfills. https://docs.stimulusreflex.com/setup#polyfills-for-ie11.\"));\n        console.error(e);\n      } else {\n        console.warn(\"CableReady \".concat(name, \" failed due to missing DOM element for selector: '\").concat(operation.selector, \"'\"));\n      }\n    }\n  });\n};\n\nvar performAsync = function performAsync(operations) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    emitMissingElementWarnings: true\n  };\n  return new Promise(function (resolve, reject) {\n    try {\n      resolve(perform(operations, options));\n    } catch (err) {\n      reject(err);\n    }\n  });\n};\n\nvar initialize = function initialize() {\n  var initializeOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var consumer = initializeOptions.consumer;\n  actionCable.setConsumer(consumer);\n  if (!customElements.get('stream-from')) customElements.define('stream-from', StreamFromElement);\n  if (!customElements.get('updates-for')) customElements.define('updates-for', UpdatesForElement);\n};\n\nexport { perform, performAsync, initialize };\nexport var consumer = actionCable.getConsumer();","map":null,"metadata":{},"sourceType":"module"}