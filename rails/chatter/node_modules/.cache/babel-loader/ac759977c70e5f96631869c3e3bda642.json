{"ast":null,"code":"import { camelize } from './utils';\nimport Debug from './debug'; // Invokes a lifecycle method on a StimulusReflex controller.\n//\n// - stage - the lifecycle stage\n//   * before\n//   * success\n//   * error\n//   * halted\n//   * after\n//   * finalize\n//\n// - reflexElement - the element that triggered the Reflex (not necessarily the StimulusReflex Controller Element)\n//\n// - controllerElement - the element holding the StimulusReflex Controller\n//\n// - reflexId - the UUIDv4 which uniquely identifies the Reflex\n//\n\nvar invokeLifecycleMethod = function invokeLifecycleMethod(stage, reflexElement, controllerElement, reflexId) {\n  if (!controllerElement || !controllerElement.reflexData[reflexId]) return;\n  var controller = controllerElement.reflexController[reflexId];\n  var reflex = controllerElement.reflexData[reflexId].target;\n  var reflexMethodName = reflex.split('#')[1];\n  var specificLifecycleMethodName = ['before', 'after', 'finalize'].includes(stage) ? \"\".concat(stage).concat(camelize(reflexMethodName)) : \"\".concat(camelize(reflexMethodName, false)).concat(camelize(stage));\n  var specificLifecycleMethod = controller[specificLifecycleMethodName];\n  var genericLifecycleMethodName = ['before', 'after', 'finalize'].includes(stage) ? \"\".concat(stage, \"Reflex\") : \"reflex\".concat(camelize(stage));\n  var genericLifecycleMethod = controller[genericLifecycleMethodName];\n\n  if (typeof specificLifecycleMethod === 'function') {\n    specificLifecycleMethod.call(controller, reflexElement, reflex, controllerElement.reflexError[reflexId], reflexId);\n  }\n\n  if (typeof genericLifecycleMethod === 'function') {\n    genericLifecycleMethod.call(controller, reflexElement, reflex, controllerElement.reflexError[reflexId], reflexId);\n  }\n\n  if (reflexes[reflexId] && stage === reflexes[reflexId].finalStage) {\n    Reflect.deleteProperty(controllerElement.reflexController, reflexId);\n    Reflect.deleteProperty(controllerElement.reflexData, reflexId);\n    Reflect.deleteProperty(controllerElement.reflexError, reflexId);\n    Reflect.deleteProperty(reflexes, reflexId);\n  }\n};\n\ndocument.addEventListener('stimulus-reflex:before', function (event) {\n  return invokeLifecycleMethod('before', event.detail.element, event.detail.controller.element, event.detail.reflexId);\n}, true);\ndocument.addEventListener('stimulus-reflex:success', function (event) {\n  invokeLifecycleMethod('success', event.detail.element, event.detail.controller.element, event.detail.reflexId);\n  dispatchLifecycleEvent('after', event.detail.element, event.detail.controller.element, event.detail.reflexId);\n}, true);\ndocument.addEventListener('stimulus-reflex:nothing', function (event) {\n  invokeLifecycleMethod('success', event.detail.element, event.detail.controller.element, event.detail.reflexId);\n  dispatchLifecycleEvent('after', event.detail.element, event.detail.controller.element, event.detail.reflexId);\n}, true);\ndocument.addEventListener('stimulus-reflex:error', function (event) {\n  invokeLifecycleMethod('error', event.detail.element, event.detail.controller.element, event.detail.reflexId);\n  dispatchLifecycleEvent('after', event.detail.element, event.detail.controller.element, event.detail.reflexId);\n}, true);\ndocument.addEventListener('stimulus-reflex:halted', function (event) {\n  return invokeLifecycleMethod('halted', event.detail.element, event.detail.controller.element, event.detail.reflexId);\n}, true);\ndocument.addEventListener('stimulus-reflex:after', function (event) {\n  return invokeLifecycleMethod('after', event.detail.element, event.detail.controller.element, event.detail.reflexId);\n}, true);\ndocument.addEventListener('stimulus-reflex:finalize', function (event) {\n  return invokeLifecycleMethod('finalize', event.detail.element, event.detail.controller.element, event.detail.reflexId);\n}, true); // Dispatches a lifecycle event on document\n//\n// - stage - the lifecycle stage\n//   * before\n//   * success\n//   * error\n//   * halted\n//   * after\n//   * finalize\n//\n// - reflexElement - the element that triggered the Reflex (not necessarily the StimulusReflex Controller Element)\n//\n// - controllerElement - the element holding the StimulusReflex Controller\n//\n// - reflexId - the UUIDv4 which uniquely identifies the Reflex\n//\n\nexport var dispatchLifecycleEvent = function dispatchLifecycleEvent(stage, reflexElement, controllerElement, reflexId) {\n  if (!controllerElement) {\n    if (Debug.enabled && !reflexes[reflexId].warned) {\n      console.warn(\"StimulusReflex was not able execute callbacks or emit events for \\\"\".concat(stage, \"\\\" or later life-cycle stages for this Reflex. The StimulusReflex Controller Element is no longer present in the DOM. Could you move the StimulusReflex Controller to an element higher in your DOM?\"));\n      reflexes[reflexId].warned = true;\n    }\n\n    return;\n  }\n\n  if (!controllerElement.reflexController || controllerElement.reflexController && !controllerElement.reflexController[reflexId]) {\n    if (Debug.enabled && !reflexes[reflexId].warned) {\n      console.warn(\"StimulusReflex detected that the StimulusReflex Controller responsible for this Reflex has been replaced with a new instance. Callbacks and events for \\\"\".concat(stage, \"\\\" or later life-cycle stages cannot be executed.\"));\n      reflexes[reflexId].warned = true;\n    }\n\n    return;\n  }\n\n  var _ref = controllerElement.reflexData[reflexId] || {},\n      target = _ref.target;\n\n  var controller = controllerElement.reflexController[reflexId] || {};\n  var event = \"stimulus-reflex:\".concat(stage);\n  var detail = {\n    reflex: target,\n    controller: controller,\n    reflexId: reflexId,\n    element: reflexElement\n  };\n  controllerElement.dispatchEvent(new CustomEvent(event, {\n    bubbles: true,\n    cancelable: false,\n    detail: detail\n  }));\n  if (window.jQuery) window.jQuery(controllerElement).trigger(event, detail);\n};","map":null,"metadata":{},"sourceType":"module"}